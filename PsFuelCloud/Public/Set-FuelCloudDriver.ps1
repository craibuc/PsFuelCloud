<#
.SYNOPSIS
Labore labore ea est sint deserunt excepteur cillum sit elit et eiusmod nisi est magna.

.PARAMETER AccessToken
Bearer token.

.PARAMETER id
The driver record's unique identifier (generated by FuelCloud).

.PARAMETER full_name
The driver's full name.

.PARAMETER code
The driver's code.

.PARAMETER phone
The driver's telephone #.

.PARAMETER pin
The driver's PIN (5-digit numeric value, from 00000 to 99999).

.PARAMETER status
0 (disabled) or 1 (enabled).

.LINK
https://developer.fuelcloud.com/?version=latest#04913aa9-7d59-46ff-be87-25fc53237e0b

#>
function Set-FuelCloudDriver {

    [CmdletBinding()]
    param
    (
        [Parameter(Mandatory)]
        [string]$AccessToken,

        [Parameter(ValueFromPipelineByPropertyName, Mandatory)]
        [int]$id,

        [Parameter(ValueFromPipelineByPropertyName, Mandatory)]
        [string]$full_name,

        [Parameter(ValueFromPipelineByPropertyName)]
        [string]$code,

        [Parameter(ValueFromPipelineByPropertyName)]
        [string]$phone,

        [Parameter(ValueFromPipelineByPropertyName)]
        [ValidateRange(0,99999)]
        [int]$pin,

        [Parameter(ValueFromPipelineByPropertyName)]
        [int]$status
    )

    begin {    
        $Headers = @{Authorization = $AccessToken}
    }
    process
    {
        $Uri = "https://api.fuelcloud.com/rest/v1.0/driver/$id"
        Write-Debug "Uri: $Uri"

        $Body = @{}
        if ($FullName) { $Body['full_name']=$FullName }
        if ($pin) { $Body['pin']=$pin.ToString().PadLeft(5,'0') }
        if ($Phone) { $Body['phone']=$Phone }
        if ($Code) { $Body['code']=$Code }
        if ($Status) { $Body['status']=$Status }
    
        # PATCH
        $Content = ( Invoke-WebRequest -Uri $uri -Method Patch -Body $Body -ContentType "application/json" -Headers $Headers ).Content | ConvertFrom-Json
    
        # returns PsCustomObject representation of object
        if ( $Content.data ) { $Content.data }
    
        # otherwise raise an exception
        elseif ($Content.error) { Write-Error -Message $Content.error.message }    
    }
    end {}

}
